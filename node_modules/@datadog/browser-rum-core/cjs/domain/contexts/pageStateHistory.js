"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetPageStates = exports.addPageState = exports.startPageStateHistory = exports.MAX_PAGE_STATE_ENTRIES = void 0;
var browser_core_1 = require("@datadog/browser-core");
exports.MAX_PAGE_STATE_ENTRIES = 500;
var pageStateEntries = [];
var currentPageState;
function startPageStateHistory() {
    addPageState(getPageState());
    var stop = (0, browser_core_1.addEventListeners)(window, [
        "pageshow" /* DOM_EVENT.PAGE_SHOW */,
        "focus" /* DOM_EVENT.FOCUS */,
        "blur" /* DOM_EVENT.BLUR */,
        "visibilitychange" /* DOM_EVENT.VISIBILITY_CHANGE */,
        "resume" /* DOM_EVENT.RESUME */,
        "freeze" /* DOM_EVENT.FREEZE */,
        "pagehide" /* DOM_EVENT.PAGE_HIDE */,
    ], function (event) {
        // Only get events fired by the browser to avoid false currentPageState changes done with custom events
        // cf: developer extension auto flush: https://github.com/DataDog/browser-sdk/blob/2f72bf05a672794c9e33965351964382a94c72ba/developer-extension/src/panel/flushEvents.ts#L11-L12
        if (!event.isTrusted) {
            return;
        }
        if (event.type === "freeze" /* DOM_EVENT.FREEZE */) {
            addPageState("frozen" /* PageState.FROZEN */);
        }
        else if (event.type === "pagehide" /* DOM_EVENT.PAGE_HIDE */) {
            addPageState(event.persisted ? "frozen" /* PageState.FROZEN */ : "terminated" /* PageState.TERMINATED */);
        }
        else {
            addPageState(getPageState());
        }
    }, { capture: true }).stop;
    return {
        findAll: function (startTime, duration) {
            var entries = [];
            var endTime = (0, browser_core_1.addDuration)(startTime, duration);
            for (var i = pageStateEntries.length - 1; i >= 0; i--) {
                var stateStartTime = pageStateEntries[i].startTime;
                if (stateStartTime >= endTime) {
                    continue;
                }
                entries.unshift(pageStateEntries[i]);
                if (stateStartTime < startTime) {
                    break;
                }
            }
            return entries.length ? entries : undefined;
        },
        stop: stop,
    };
}
exports.startPageStateHistory = startPageStateHistory;
function getPageState() {
    if (document.visibilityState === 'hidden') {
        return "hidden" /* PageState.HIDDEN */;
    }
    if (document.hasFocus()) {
        return "active" /* PageState.ACTIVE */;
    }
    return "passive" /* PageState.PASSIVE */;
}
function addPageState(nextPageState, maxPageStateEntries) {
    if (maxPageStateEntries === void 0) { maxPageStateEntries = exports.MAX_PAGE_STATE_ENTRIES; }
    if (nextPageState === currentPageState) {
        return;
    }
    currentPageState = nextPageState;
    if (pageStateEntries.length === maxPageStateEntries) {
        pageStateEntries.shift();
    }
    pageStateEntries.push({ state: currentPageState, startTime: (0, browser_core_1.relativeNow)() });
}
exports.addPageState = addPageState;
function resetPageStates() {
    pageStateEntries = [];
    currentPageState = undefined;
}
exports.resetPageStates = resetPageStates;
//# sourceMappingURL=pageStateHistory.js.map